diff --git a/src/webgl/texture.js b/src/webgl/texture.js
index 1ce4f55..aa2a1e7 100644
--- a/src/webgl/texture.js
+++ b/src/webgl/texture.js
@@ -1,382 +1,673 @@
-import {GL, WebGL2RenderingContext, WebGLBuffer, glTypeFromArray}
-  from './webgl';
-import {assertWebGLContext} from './webgl-checks';
+/* eslint-disable no-inline-comments, max-len */
+import GL from './gl-constants';
+import {WebGLBuffer} from './api';
+import {withParameters, isWebGL, ERR_WEBGL, isWebGL2, ERR_WEBGL2} from './context';
+import Resource from './resource';
 import Buffer from './buffer';
 import {uid} from '../utils';
 import assert from 'assert';
 
-export default class Texture {
+// const S3TC = 'WEBGL_compressed_texture_s3tc';
+// const PVRTC = 'WEBGL_compressed_texture_pvrtc';
+// const ES3 = 'WEBGL_compressed_texture_es3';
+// const ETC1 = 'WEBGL_compressed_texture_etc1';
+// const SRGB = 'EXT_sRGB';
+// const DEPTH = 'WEBGL_depth_texture';
+
+// Legal combinations for internalFormat, format and type
+export const TEXTURE_FORMATS = {
+  // Unsized texture format - more performance
+  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},
+  [GL.RGBA]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]},
+  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},
+  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},
+  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]}
+
+  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},
+  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},
+
+  // Sized texture format - more performance
+  // R
+  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},
+  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
+  // [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},
+  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
+  // // RG
+  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},
+  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
+  // [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},
+  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
+  // // RGB
+  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
+  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
+  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},
+  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},
+  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},
+  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},
+  // [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},
+  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
+  // // RGBA
+  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
+  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
+  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},
+  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},
+  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
+  // [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true},
+  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}
+
+  // Compressed formats
+
+  // WEBGL_compressed_texture_s3tc
+
+  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},
+  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},
+  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},
+  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},
+
+  // WEBGL_compressed_texture_es3
+
+  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED
+  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED
+  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG
+  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG
+  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB
+  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG
+  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB
+  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA
+  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA
+  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA
+  /* WebGL2 guaranteed availability compressed formats?
+  COMPRESSED_R11_EAC RED
+  COMPRESSED_SIGNED_R11_EAC RED
+  COMPRESSED_RG11_EAC RG
+  COMPRESSED_SIGNED_RG11_EAC RG
+  COMPRESSED_RGB8_ETC2 RGB
+  COMPRESSED_SRGB8_ETC2 RGB
+  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA
+  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA
+  COMPRESSED_RGBA8_ETC2_EAC RGBA
+  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
+  */
+
+  // WEBGL_compressed_texture_pvrtc
+
+  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},
+  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},
+  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},
+  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},
+
+  // WEBGL_compressed_texture_etc1
+
+  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},
+
+  // WEBGL_compressed_texture_atc
+
+  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},
+  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},
+  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}
+};
+
+function isFormatSupported(gl, format) {
+  assert(isWebGL(gl), ERR_WEBGL);
+  const info = TEXTURE_FORMATS[format];
+  if (!info) {
+    return false;
+  }
+  if (info.gl1 === undefined && info.gl2 === undefined) { // No info - always supported
+    return true;
+  }
+  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;
+  return typeof value === 'string' ? gl.getExtension(value) : value;
+}
+
+function isLinearFilteringSupported(gl, format) {
+  const info = TEXTURE_FORMATS[format];
+  switch (info && info.types[0]) {
+  // Both WebGL1 and WebGL2?
+  case GL.FLOAT: return gl.getExtension('OES_texture_float_linear');
+  // Not in WebGL2?
+  case GL.HALF_FLOAT: return gl.getExtension('OES_texture_half_float_linear');
+  default: return true;
+  }
+}
 
+export default class Texture extends Resource {
+
+  static isSupported(gl, {format, linearFiltering} = {}) {
+    assert(isWebGL(gl), ERR_WEBGL);
+    let supported = true;
+    if (format) {
+      supported = supported && isFormatSupported(gl, format);
+      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));
+    }
+    return supported;
+  }
+
+  // target cannot be modified by bind:
+  // textures are special because when you first bind them to a target,
+  // they get special information. When you first bind a texture as a
+  // GL_TEXTURE_2D, you are actually setting special state in the texture.
+  // You are saying that this texture is a 2D texture.
+  // And it will always be a 2D texture; this state cannot be changed ever.
+  // If you have a texture that was first bound as a GL_TEXTURE_2D,
+  // you must always bind it as a GL_TEXTURE_2D;
+  // attempting to bind it as GL_TEXTURE_1D will give rise to an error
+  // (while run-time).
   constructor(gl, opts) {
     const {
       id = uid('texture'),
-      unpackFlipY = true,
-      magFilter = GL.NEAREST,
-      minFilter = GL.NEAREST,
-      wrapS = GL.CLAMP_TO_EDGE,
-      wrapT = GL.CLAMP_TO_EDGE,
-      target = GL.TEXTURE_2D,
-      handle
+      handle,
+      target
+      // , magFilter, minFilter, wrapS, wrapT
     } = opts;
 
-    assertWebGLContext(gl);
+    super(gl, {id, handle});
 
-    this.handle = handle || gl.createTexture();
-    this.id = id;
-    this.gl = gl;
     this.target = target;
     this.hasFloatTexture = gl.getExtension('OES_texture_float');
-    this.width = null;
-    this.height = null;
     this.textureUnit = undefined;
-    this.userData = {};
+  }
 
-    this.setPixelStorageModes(Object.assign({}, opts, {unpackFlipY}));
-    this.setParameters(Object.assign({}, opts, {magFilter, minFilter, wrapS, wrapT}));
+  toString() {
+    return `Texture(${this.id},${this.width}x${this.height})`;
   }
 
-  delete() {
-    if (this.handle) {
-      this.gl.deleteTexture(this.handle);
-      this.handle = null;
+  /* eslint-disable max-len, max-statements */
+  initialize(opts = {}) {
+    const {
+      data = null,
+      format = GL.RGBA,
+      type = GL.UNSIGNED_BYTE,
+      border = 0,
+      mipmaps = true,
+      recreate = false,
+      parameters = {},
+      pixelStore = {},
+      // Deprecated parameters
+      unpackFlipY = true
+    } = opts;
+
+    let {width, height, dataFormat} = opts;
+
+    // Deduce width and height
+    ({width, height, dataFormat} = this._deduceParameters({
+      format, type, dataFormat, compressed: false, data, width, height
+    }));
+
+    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;
+    const glPixelStore = Object.assign({[GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY}, pixelStore);
+
+    // Temporarily apply any pixel store settings and build textures
+    withParameters(this.gl, glPixelStore, () => {
+      this.setImageData({data, width, height, format, type, dataFormat, border, mipmaps});
+    });
+    if (mipmaps) {
+      this.generateMipmap();
+    }
+
+    // Set texture sampler parameters
+    this.setParameters(parameters);
+
+    // Store opts for accessors
+    this.width = width;
+    this.height = height;
+    this.format = format;
+    this.type = type;
+    this.dataFormat = dataFormat;
+    this.border = border;
+    this.mipmaps = mipmaps;
+
+    // TODO - Store data to enable auto recreate on context loss
+    if (recreate) {
+      this.data = data;
     }
-    return this;
   }
 
-  toString() {
-    return `Texture(${this.id},${this.width}x${this.height})`;
+  // If size has changed, reinitializes with current format
+  // note clears image and mipmaps
+  resize({width, height}) {
+    if (width !== this.width || height !== this.height) {
+      return this.initialize({
+        width,
+        height,
+        format: this.format,
+        type: this.type,
+        dataFormat: this.dataFormat,
+        border: this.border,
+        mipmaps: false
+      });
+    }
+    return this;
   }
 
-  generateMipmap() {
+  // Call to regenerate mipmaps after modifying texture(s)
+  generateMipmap(params = {}) {
     this.gl.bindTexture(this.target, this.handle);
-    this.gl.generateMipmap(this.target);
+    withParameters(this.gl, params, () => {
+      this.gl.generateMipmap(this.target);
+    });
     this.gl.bindTexture(this.target, null);
     return this;
   }
 
-  /*
-   * @param {*} pixels -
-   *  null - create empty texture of specified format
-   *  Typed array - init from image data in typed array
-   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
-   *  HTMLImageElement|Image - Inits with content of image. Auto width/height
-   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
-   *  HTMLVideoElement - Creates video texture. Auto width/height
-   *
-   * @param {GLint} width -
-   * @param {GLint} height -
-   * @param {GLint} mipMapLevel -
-   * @param {GLenum} format - format of image data.
-   * @param {GLenum} type
-   *  - format of array (autodetect from type) or
-   *  - (WEBGL2) format of buffer
-   * @param {Number} offset - (WEBGL2) offset from start of buffer
-   * @param {GLint} border - must be 0.
+  /**
+   * Redefines an area of an existing texture
+   * Note: does not allocate storage
    */
-  /* eslint-disable max-len, max-statements, complexity */
-  setImageData({
+  subImage({
     target = this.target,
     pixels = null,
     data = null,
+    x = 0,
+    y = 0,
     width,
     height,
-    mipmapLevel = 0,
+    level = 0,
     format = GL.RGBA,
     type,
+    dataFormat,
+    compressed = false,
     offset = 0,
     border = 0
   }) {
-    const {gl} = this;
-
-    pixels = pixels || data;
+    ({type, dataFormat, compressed, width, height} = this._deduceParameters({
+      format, type, dataFormat, compressed, data, width, height}));
 
     // Support ndarrays
-    if (pixels && pixels.data) {
-      const ndarray = pixels;
-      pixels = ndarray.data;
+    if (data && data.data) {
+      const ndarray = data;
+      data = ndarray.data;
       width = ndarray.shape[0];
       height = ndarray.shape[1];
     }
 
-    gl.bindTexture(this.target, this.handle);
+    // Support buffers
+    if (data instanceof Buffer) {
+      data = data.handle;
+    }
 
-    if (pixels === null) {
-
-      // Create an minimal texture
-      width = width || 1;
-      height = height || 1;
-      type = type || GL.UNSIGNED_BYTE;
-      // pixels = new Uint8Array([255, 0, 0, 1]);
-      gl.texImage2D(target,
-        mipmapLevel, format, width, height, border, format, type, pixels);
-      this.width = width;
-      this.height = height;
-
-    } else if (ArrayBuffer.isView(pixels)) {
-
-      // Create from a typed array
-      assert(width > 0 && height > 0, 'Texture2D: Width and height required');
-      type = type || glTypeFromArray(pixels);
-      // TODO - WebGL2 check?
-      if (type === gl.FLOAT && !this.hasFloatTexture) {
-        throw new Error('floating point textures are not supported.');
-      }
-      gl.texImage2D(target,
-        mipmapLevel, format, width, height, border, format, type, pixels);
-      this.width = width;
-      this.height = height;
-
-    } else if (pixels instanceof WebGLBuffer || pixels instanceof Buffer) {
+    this.gl.bindTexture(this.target, this.handle);
 
+    // TODO - x,y parameters
+    if (compressed) {
+      this.gl.compressedTexSubImage2D(target,
+        level, x, y, width, height, format, data);
+    } else if (data === null) {
+      this.gl.texSubImage2D(target,
+        level, format, width, height, border, dataFormat, type, null);
+    } else if (ArrayBuffer.isView(data)) {
+      this.gl.texSubImage2D(target,
+        level, format, width, height, border, dataFormat, type, data);
+    } else if (data instanceof WebGLBuffer) {
       // WebGL2 allows us to create texture directly from a WebGL buffer
-      assert(gl instanceof WebGL2RenderingContext, 'Requires WebGL2');
-      type = type || GL.UNSIGNED_BYTE;
+      assert(isWebGL2(this.gl), ERR_WEBGL2);
       // This texImage2D signature uses currently bound GL_PIXEL_UNPACK_BUFFER
-      const buffer = Buffer.makeFrom(pixels);
-      gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.handle);
-      gl.texImage2D(target,
-        mipmapLevel, format, width, height, border, format, type, offset);
-      gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);
-      this.width = width;
-      this.height = height;
-
+      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);
+      this.gl.texSubImage2D(target,
+        level, format, width, height, border, format, type, offset);
+      this.gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);
     } else {
-
-      const imageSize = this._deduceImageSize(pixels);
-      // Assume pixels is a browser supported object (ImageData, Canvas, ...)
-      assert(width === undefined && height === undefined,
-        'Texture2D.setImageData: Width and height must not be provided');
-      type = type || GL.UNSIGNED_BYTE;
-      gl.texImage2D(target, mipmapLevel, format, format, type, pixels);
-      this.width = imageSize.width;
-      this.height = imageSize.height;
+      // Assume data is a browser supported object (ImageData, Canvas, ...)
+      this.gl.texSubImage2D(target, level, x, y, format, type, data);
     }
 
-    gl.bindTexture(this.target, null);
-
-    return this;
+    this.gl.bindTexture(this.target, null);
   }
   /* eslint-enable max-len, max-statements, complexity */
 
-  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */
-  _deduceImageSize(image) {
-    if (typeof ImageData !== 'undefined' && image instanceof ImageData) {
-      return {width: image.width, height: image.height};
-    } else if (typeof HTMLImageElement !== 'undefined' &&
-      image instanceof HTMLImageElement) {
-      return {width: image.naturalWidth, height: image.naturalHeight};
-    } else if (typeof HTMLCanvasElement !== 'undefined' &&
-      image instanceof HTMLCanvasElement) {
-      return {width: image.width, height: image.height};
-    } else if (typeof HTMLVideoElement !== 'undefined' &&
-      image instanceof HTMLVideoElement) {
-      return {width: image.videoWidth, height: image.videoHeight};
-    }
-    throw new Error('Unknown image data format. Failed to deduce image size');
-  }
-
   /**
-   * Batch update pixel storage modes
-   * @param {GLint} packAlignment - Packing of pixel data in memory (1,2,4,8)
-   * @param {GLint} unpackAlignment - Unpacking pixel data from memory(1,2,4,8)
-   * @param {GLboolean} unpackFlipY -  Flip source data along its vertical axis
-   * @param {GLboolean} unpackPremultiplyAlpha -
-   *   Multiplies the alpha channel into the other color channels
-   * @param {GLenum} unpackColorspaceConversion -
-   *   Default color space conversion or no color space conversion.
+   * Defines a two-dimensional texture image or cube-map texture image with
+   * pixels from the current framebuffer (rather than from client memory).
+   * (gl.copyTexImage2D wrapper)
    *
-   * @param {GLint} packRowLength -
-   *  Number of pixels in a row.
-   * @param {} packSkipPixels -
-   *   Number of pixels skipped before the first pixel is written into memory.
-   * @param {} packSkipRows -
-   *   Number of rows of pixels skipped before first pixel is written to memory.
-   * @param {} unpackRowLength -
-   *   Number of pixels in a row.
-   * @param {} unpackImageHeight -
-   *   Image height used for reading pixel data from memory
-   * @param {} unpackSkipPixels -
-   *   Number of pixel images skipped before first pixel is read from memory
-   * @param {} unpackSkipRows -
-   *   Number of rows of pixels skipped before first pixel is read from memory
-   * @param {} unpackSkipImages -
-   *   Number of pixel images skipped before first pixel is read from memory
+   * Note that binding a texture into a Framebuffer's color buffer and
+   * rendering can be faster.
    */
-  /* eslint-disable complexity, max-statements */
-  setPixelStorageModes({
-    packAlignment,
-    unpackAlignment,
-    unpackFlipY,
-    unpackPremultiplyAlpha,
-    unpackColorspaceConversion,
-    // WEBGL2
-    packRowLength,
-    packSkipPixels,
-    packSkipRows,
-    unpackRowLength,
-    unpackImageHeight,
-    unpackSkipPixels,
-    unpackSkipRows,
-    unpackSkipImages
-  } = {}) {
-    const {gl} = this;
+  copyFramebuffer({
+    target = this.target,
+    framebuffer,
+    offset = 0,
+    x = 0,
+    y = 0,
+    width,
+    height,
+    level = 0,
+    internalFormat = GL.RGBA,
+    border = 0
+  }) {
+    if (framebuffer) {
+      framebuffer.bind();
+    }
 
-    gl.bindTexture(this.target, this.handle);
+    // target
+    this.bind();
+    this.gl.copyTexImage2D(
+      this.target, level, internalFormat, x, y, width, height, border);
+    this.unbind();
 
-    if (packAlignment) {
-      gl.pixelStorei(gl.PACK_ALIGNMENT, packAlignment);
-    }
-    if (unpackAlignment) {
-      gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);
-    }
-    if (unpackFlipY) {
-      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, unpackFlipY);
-    }
-    if (unpackPremultiplyAlpha) {
-      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);
-    }
-    if (unpackColorspaceConversion) {
-      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,
-        unpackColorspaceConversion);
+    if (framebuffer) {
+      framebuffer.unbind();
     }
+  }
 
-    // WEBGL2
-    if (packRowLength) {
-      gl.pixelStorei(gl.PACK_ROW_LENGTH, packRowLength);
-    }
-    if (packSkipPixels) {
-      gl.pixelStorei(gl.PACK_SKIP_PIXELS, packSkipPixels);
-    }
-    if (packSkipRows) {
-      gl.pixelStorei(gl.PACK_SKIP_ROWS, packSkipRows);
-    }
-    if (unpackRowLength) {
-      gl.pixelStorei(gl.UNPACK_ROW_LENGTH, unpackRowLength);
-    }
-    if (unpackImageHeight) {
-      gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);
-    }
-    if (unpackSkipPixels) {
-      gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);
-    }
-    if (unpackSkipRows) {
-      gl.pixelStorei(gl.UNPACK_SKIP_ROWS, unpackSkipRows);
-    }
-    if (unpackSkipImages) {
-      gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, unpackSkipImages);
+  getActiveUnit() {
+    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;
+  }
+
+  // target cannot be modified by bind:
+  // textures are special because when you first bind them to a target,
+  // they get special information. When you first bind a texture as a
+  // GL_TEXTURE_2D, you are actually setting special state in the texture.
+  // You are saying that this texture is a 2D texture.
+  // And it will always be a 2D texture; this state cannot be changed ever.
+  // If you have a texture that was first bound as a GL_TEXTURE_2D,
+  // you must always bind it as a GL_TEXTURE_2D;
+  // attempting to bind it as GL_TEXTURE_1D will give rise to an error
+  // (while run-time).
+
+  bind(textureUnit = this.textureUnit) {
+    if (textureUnit === undefined) {
+      throw new Error('Texture.bind: must specify texture unit');
     }
+    this.textureUnit = textureUnit;
+    this.gl.activeTexture(GL.TEXTURE0 + textureUnit);
+    this.gl.bindTexture(this.target, this.handle);
+    return textureUnit;
+  }
 
-    gl.bindTexture(this.target, null);
-    return this;
+  unbind() {
+    if (this.textureUnit === undefined) {
+      throw new Error('Texture.unbind: texture unit not specified');
+    }
+    this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);
+    this.gl.bindTexture(this.target, null);
+    return this.textureUnit;
   }
-  /* eslint-enable complexity, max-statements */
 
-  /**
-   * Batch update sampler settings
+  // PRIVATE METHODS
+
+  /*
+   * Allocates storage
+   * @param {*} pixels -
+   *  null - create empty texture of specified format
+   *  Typed array - init from image data in typed array
+   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
+   *  HTMLImageElement|Image - Inits with content of image. Auto width/height
+   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
+   *  HTMLVideoElement - Creates video texture. Auto width/height
    *
-   * @param {GLenum} magFilter - texture magnification filter.
-   * @param {GLenum} minFilter - texture minification filter
-   * @param {GLenum} wrapS - texture wrapping function for texture coordinate s.
-   * @param {GLenum} wrapT - texture wrapping function for texture coordinate t.
-   * WEBGL2 only:
-   * @param {GLenum} wrapR - texture wrapping function for texture coordinate r.
-   * @param {GLenum} compareFunc - texture comparison function.
-   * @param {GLenum} compareMode - texture comparison mode.
-   * @param {GLfloat} minLOD - minimum level-of-detail value.
-   * @param {GLfloat} maxLOD - maximum level-of-detail value.
-   * @param {GLfloat} baseLevel - Texture mipmap level
-   * @param {GLfloat} maxLevel - Maximum texture mipmap array level
+   * @param {GLint} width -
+   * @param {GLint} height -
+   * @param {GLint} mipMapLevel -
+   * @param {GLenum} format - format of image data.
+   * @param {GLenum} type
+   *  - format of array (autodetect from type) or
+   *  - (WEBGL2) format of buffer
+   * @param {Number} offset - (WEBGL2) offset from start of buffer
+   * @param {GLint} border - must be 0.
    */
-  /* eslint-disable complexity, max-statements */
-  setParameters({
-    magFilter,
-    minFilter,
-    wrapS,
-    wrapT,
-    // WEBGL2
-    wrapR,
-    baseLevel,
-    maxLevel,
-    minLOD,
-    maxLOD,
-    compareFunc,
-    compareMode
+  /* eslint-disable max-len, max-statements, complexity */
+  setImageData({
+    target = this.target,
+    pixels = null,
+    data = null,
+    width,
+    height,
+    level = 0,
+    format = GL.RGBA,
+    type,
+    dataFormat,
+    offset = 0,
+    border = 0,
+    compressed = false
   }) {
+    ({type, dataFormat, compressed, width, height} = this._deduceParameters({
+      format, type, dataFormat, compressed, data, width, height}));
+
     const {gl} = this;
     gl.bindTexture(this.target, this.handle);
 
-    if (magFilter) {
-      gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, magFilter);
-    }
-    if (minFilter) {
-      gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, minFilter);
-    }
-    if (wrapS) {
-      gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);
+    let dataType = null;
+    ({data, dataType} = this._getDataType({data, compressed}));
+    switch (dataType) {
+    case 'typed-array':
+    case 'null':
+      gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);
+      break;
+    case 'buffer':
+      // WebGL2 enables creating textures directly from a WebGL buffer
+      assert(isWebGL2(gl), ERR_WEBGL2);
+      gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);
+      gl.texImage2D(target, level, format, width, height, border, format, type, offset);
+      break;
+    case 'browser-object':
+      gl.texImage2D(target, level, format, format, type, data);
+      break;
+    case 'compressed':
+      gl.compressedTexImage2D(this.target, level, format, width, height, border, data);
+      break;
+    default:
+      assert(false, 'Unknown image data type');
     }
-    if (wrapT) {
-      gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);
-    }
-    // WEBGL2
-    if (wrapR) {
-      gl.texParameteri(this.target, gl.TEXTURE_WRAP_R, wrapR);
+  }
+  /* eslint-enable max-len, max-statements, complexity */
+
+  _getDataType({data, compressed = false}) {
+    if (compressed) {
+      return {data, dataType: 'compressed'};
     }
-    if (baseLevel) {
-      gl.texParameteri(this.target, gl.TEXTURE_BASE_LEVEL, baseLevel);
+    if (data === null) {
+      return {data, dataType: 'null'};
     }
-    if (maxLevel) {
-      gl.texParameteri(this.target, gl.TEXTURE_MAX_LEVEL, maxLevel);
+    if (ArrayBuffer.isView(data)) {
+      return {data, dataType: 'typed-array'};
     }
-    if (compareFunc) {
-      gl.texParameteri(this.target, gl.TEXTURE_COMPARE_FUNC, compareFunc);
+    if (data instanceof Buffer) {
+      return {data: data.handle, dataType: 'buffer'};
     }
-    if (compareMode) {
-      gl.texParameteri(this.target, gl.TEXTURE_COMPARE_MODE, compareMode);
+    if (data instanceof WebGLBuffer) {
+      return {data, dataType: 'buffer'};
     }
-    if (minLOD) {
-      gl.texParameterf(this.target, gl.TEXTURE_MIN_LOD, minLOD);
+    // Assume data is a browser supported object (ImageData, Canvas, ...)
+    return {data, dataType: 'browser-object'};
+  }
+
+  // Image 3D copies from Typed Array or WebGLBuffer
+  setImage3D({
+    level = 0,
+    internalformat = GL.RGBA,
+    width,
+    height,
+    depth = 1,
+    border = 0,
+    format,
+    type = GL.UNSIGNED_BYTE,
+    offset = 0,
+    pixels
+  }) {
+    if (ArrayBuffer.isView(pixels)) {
+      this.gl.texImage3D(
+        this.target, level, internalformat,
+        width, height, depth, border, format, type, pixels);
+      return this;
     }
-    if (maxLOD) {
-      gl.texParameterf(this.target, gl.TEXTURE_MAX_LOD, maxLOD);
+
+    if (pixels instanceof Buffer) {
+      this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, pixels.handle);
+      this.gl.texImage3D(
+        this.target, level, internalformat,
+        width, height, depth, border, format, type, offset);
     }
 
-    gl.bindTexture(this.target, null);
     return this;
   }
-  /* eslint-enable complexity, max-statements */
 
-  getParameters() {
+  /* Copied from texture-2d.js
+  // WebGL2
+  setPixels(opts = {}) {
+    const {
+      buffer,
+      width = null,
+      height = null,
+      mipmapLevel = 0,
+      format = GL.RGBA,
+      type = GL.UNSIGNED_BYTE,
+      border = 0
+    } = opts;
+
     const {gl} = this;
-    gl.bindTexture(this.target, this.handle);
-    const webglParams = {
-      magFilter: gl.getTexParameter(this.target, gl.TEXTURE_MAG_FILTER),
-      minFilter: gl.getTexParameter(this.target, gl.TEXTURE_MIN_FILTER),
-      wrapS: gl.getTexParameter(this.target, gl.TEXTURE_WRAP_S),
-      wrapT: gl.getTexParameter(this.target, gl.TEXTURE_WRAP_T)
-    };
-    gl.bindTexture(this.target, null);
-    return webglParams;
+
+    // This signature of texImage2D uses currently bound GL_PIXEL_UNPACK_BUFFER
+    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);
+    // And as always, we must also bind the texture itself
+    this.bind();
+
+    gl.texImage2D(gl.TEXTURE_2D,
+      mipmapLevel, format, width, height, border, format, type, buffer.target);
+
+    this.unbind();
+    gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);
+    return this;
   }
 
-  // Deprecated methods
+  setImageDataFromCompressedBuffer(opts) {
+    const {
+      buffer,
+      // offset = 0,
+      width = null,
+      height = null,
+      mipmapLevel = 0,
+      internalFormat = GL.RGBA,
+      // format = GL.RGBA,
+      // type = GL.UNSIGNED_BYTE,
+      border = 0
+    } = opts;
 
-  image2D({
-    pixels,
-    format = GL.RGBA,
-    type = GL.UNSIGNED_BYTE
-  }) {
-    // TODO - WebGL2 check?
-    if (type === GL.FLOAT && !this.hasFloatTexture) {
-      throw new Error('floating point textures are not supported.');
+    const {gl} = this;
+    gl.compressedTexImage2D(this.target,
+      mipmapLevel, internalFormat, width, height, border, buffer);
+    // gl.compressedTexSubImage2D(target,
+    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);
+    return this;
+  }
+
+  copySubImage(opts) {
+    const {
+      // pixels,
+      // offset = 0,
+      // x,
+      // y,
+      // width,
+      // height,
+      // mipmapLevel = 0,
+      // internalFormat = GL.RGBA,
+      // type = GL.UNSIGNED_BYTE,
+      // border = 0
+    } = opts;
+
+    // if (pixels instanceof ArrayBufferView) {
+    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);
+    // }
+    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);
+    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);
+    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);
+    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);
+    // // Additional signature in a WebGL 2 context:
+    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);
+  }
+  */
+
+  // HELPER METHODS
+
+  _deduceParameters(opts) {
+    const {format, data} = opts;
+    let {width, height, dataFormat, type, compressed} = opts;
+
+    // Deduce format and type from format
+    const textureFormat = TEXTURE_FORMATS[format];
+    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);
+    type = type || (textureFormat && textureFormat.types[0]);
+
+    // Deduce compression from format
+    compressed = compressed || (textureFormat && textureFormat.compressed);
+
+    ({width, height} = this._deduceImageSize({data, width, height}));
+
+    return {dataFormat, type, compressed, width, height, format, data};
+  }
+
+  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */
+  _deduceImageSize({data, width, height}) {
+    let size;
+
+    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {
+      size = {width: data.width, height: data.height};
+    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {
+      size = {width: data.naturalWidth, height: data.naturalHeight};
+    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {
+      size = {width: data.width, height: data.height};
+    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {
+      size = {width: data.videoWidth, height: data.videoHeight};
+    } else if (!data) {
+      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};
+    } else {
+      size = {width, height};
+    }
+
+    assert(size, 'Could not deduced texture size');
+    assert(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');
+    assert(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');
+
+    return size;
+  }
+
+  // RESOURCE METHODS
+
+  _createHandle() {
+    return this.gl.createTexture();
+  }
+
+  _deleteHandle() {
+    this.gl.deleteTexture(this.handle);
+  }
+
+  _getParameter(pname) {
+    switch (pname) {
+    case GL.TEXTURE_WIDTH:
+      return this.width;
+    case GL.TEXTURE_HEIGHT:
+      return this.height;
+    default:
+      this.gl.bindTexture(this.target, this.handle);
+      const value = this.gl.getTexParameter(this.target, pname);
+      this.gl.bindTexture(this.target, null);
+      return value;
     }
+  }
 
+  _setParameter(pname, param) {
     this.gl.bindTexture(this.target, this.handle);
-    this.gl.texImage2D(GL.TEXTURE_2D, 0, format, format, type, pixels);
+
+    // Apparently there are some integer/float conversion rules that made
+    // the WebGL committe expose two parameter setting functions in JavaScript.
+    // For now, pick the float version for parameters specified as GLfloat.
+    switch (pname) {
+    case GL.TEXTURE_MIN_LOD:
+    case GL.TEXTURE_MAX_LOD:
+      this.gl.texParameterf(this.handle, pname, param);
+      break;
+
+    case GL.TEXTURE_WIDTH:
+    case GL.TEXTURE_HEIGHT:
+      throw new Error('Cannot set emulated parameter');
+
+    default:
+      this.gl.bindTexture(this.target, this.handle);
+      this.gl.texParameteri(this.target, pname, param);
+      break;
+    }
+
     this.gl.bindTexture(this.target, null);
     return this;
   }
-
-  update(opts) {
-    throw new Error('Texture.update() is deprecated()');
-  }
 }
